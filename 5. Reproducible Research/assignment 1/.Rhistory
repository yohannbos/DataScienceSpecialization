demo()
demo(package = .packages(all.available = TRUE))
graphics
bqse
base
matrix(sample (1:6, 2*1000, replace true ), 2, 1000))
matrix(sample (1:6, 2*1000, replace= true ), 2, 1000))
matrix(sample (1:6, 2*1000, replace= true ), 2, 1000)
matrix(sample (1:6, 2*1000, replace= TRUE ), 2, 1000)
x=matrix(sample (1:6, 2*1000, replace= TRUE ), 2, 1000)
y= colSums(x)
z= sum(y==7)
mean(z)
x=matrix(sample (1:6, 2*10000, replace= TRUE ), 2, 1000)
mean (sum(colsums(x)==12))
mean (sum(colSums(x)==12))
2+3
3.14^3.14
100*mean(sin(30:87))
x = rbinom(1000,1,.5)
total = sum(x)
sum(x)
find.package("devtools")
install.packages("devtools")
library (devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
?read.xlsx
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23, mode=wb)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
install.packages("xlsx")
install.packages("rJava")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
install.packages("rjava")
install.packages("readxl")
readxl read_excel
install.packages("gdata")
library(gdata)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xlsx", mode='wb')
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
x<-7:15
y<-18:23
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=x, rowindex=y)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=1, rowindex=2)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=x, rowIndex=y)
sum(websubset$Zip*dat$Ext,na.rm=T)
sum(websubset$Zip*websubset$Ext,na.rm=T)
install.packages("xml")
install.packages("XML")
library(XML)
docxml<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T) )
library(XML)
docxml<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
docxml<-xmlTreeParse(fileurl, useInternal=T)
str("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
fileurl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
docxml<-xmlTreeParse(fileurl, useInternal=T)
rootnode<-xmlRoot(docxml)
xmlName(rootnode)
names(rootnode)
rootnode[[1][1]]
rootnode[[1]]
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv, destfile="D:/Documents/Dev/DS_spe_JH/web.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="D:/Documents/Dev/DS_spe_JH/web.csv")
fread(web.csv)
library(data.table)
fread(web.csv)
setwd("D/Documents/Dev")
fread(web.csv)
fread("D:/Documents/Dev/DS_spe_JH/web.csv")
?system.time
x<-fread("D:/Documents/Dev/DS_spe_JH/web.csv")
system.time(mean(DT$pwgtp15,by=DT$SEX))
DT<-fread("D:/Documents/Dev/DS_spe_JH/web.csv")
system.time(mean(DT$pwgtp15,by=DT$SEX))
sum(1000*system.time(mean(DT$pwgtp15,by=DT$SEX))
x<-sum(1000*system.time(mean(DT$pwgtp15,by=DT$SEX))
DT<-fread("D:/Documents/Dev/DS_spe_JH/web.csv")
system.time(for 1:1000 {mean(DT$pwgtp15,by=DT$SEX)})
?for
q
?for
??
??for
system.time(for i in 1:1000 {mean(DT$pwgtp15,by=DT$SEX)})
(for i in 1:1000 {mean(DT$pwgtp15,by=DT$SEX)})
for i in 1:1000 {mean(DT$pwgtp15,by=DT$SEX)}
for (i in 1:1000) {mean(DT$pwgtp15,by=DT$SEX)}
system.time(for (i in 1:1000) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:10000) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:10000) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:10000) {DT[,mean(pwgtp15),by=SEX]})
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:10000) {rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:10000) {DT[,mean(pwgtp15),by=SEX]})
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
?read.delim
?list.files
?paste
`001` <- read.csv("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/001.csv")
View(`001`)
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
data<-rbind(data,x)
}
colnames<-(data, c(date, sulfate, nitrate, id))
colMeans(as.character(paste(pollutant,"$data")), na.rm = T)
}
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
data<-rbind(data,x)
}
colnames<-(data, c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$data")), na.rm = T)
}
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat,x)
}
print(dat)
colnames<-(dat, c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
}
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
debug()
debug(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colnames<-(dat, c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
}
debug(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colnames<-(dat c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
colNames <- (dat, c("date", "sulfate", "nitrate", "id"))
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
}
debug(pollutantmean)
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
l<-pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
h
j
j
j
j
j
j
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
?geom_abline
?ggplot2
?ggplot
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth= "loess")
qplot(votes, rating, data = movies)+ geom_smooth()
qplot(votes, rating, data = movies)+ stats_smooth("loess")
ppois(10, 3*5)
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
#Reproducible Research: Peer Assessment 1
##Loading and preprocessing the data
```{r, echo=TRUE}
d<-getwd()
url<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,file.path(d, "activity.zip"), mode="wb")
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
```
##What is mean total number of steps taken per day?
```{r, echo=TRUE}
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
```
##What is the average daily activity pattern?
```{r, echo=TRUE}
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
On average across all the days in the dataset, the 5-minute interval containing the maximum number of steps is:
```{r, echo=TRUE}
averages[which.max(averages$steps),]
```
##Imputing missing values
There are many days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
```{r, echo=TRUE}
missing.values <- is.na(data$steps)
```
# How many missing
```{r, echo=TRUE}
table(missing.values)
```
All of the missing values are filled in with mean value for that 5-minute interval.
```{r, echo=TRUE}
imput.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(imput.value, filled.data$steps, filled.data$interval)
```
Now, using the filled data set, let's make a histogram of the total number of steps taken each day and calculate the mean and median total number of steps.
```{r, echo=TRUE}
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="Total number of steps per day")
mean(total.steps)
median(total.steps)
```
Mean and median values are higher after imputing missing data, because we replaced all missing values of the original data set by the mean value. . The total number of steps taken in such days was set to 0 by default.These 0 values now have been removed from the histogram.
##Are there differences in activity patterns between weekdays and weekends?
Find the day of the week for each measurement in the dataset (using the dataset with the filled-in values):
```{r, echo=TRUE}
wday.or.wend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
```
Now, let's make a panel plot containing plots of average number of steps taken on weekdays and weekends.
```{r, echo=TRUE}
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
```
#stop("invalid date")
View(filled.data)
setwd("D:/Documents/Data Science/Courses/Data Scientist Specialization/5. Reproducible Research")
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
3
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
structure(filled.data)
structure(filled.data)
?structure
attr(filled.data)
attributes(filled.data)
attributes(filled.data$date)
wday.or.wend <- function(da) {
day <- weekdays(da)
print(day)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
wday.or.wend <- function(da) {
day <- weekdays(da)
print(day)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
#else
#stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
#Reproducible Research: Peer Assessment 1
##Loading and preprocessing the data
d<-getwd()
url<-"http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url,file.path(d, "activity.zip"), mode="wb")
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
##What is mean total number of steps taken per day?
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
##What is the average daily activity pattern?
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
#On average across all the days in the dataset, the 5-minute interval containing the maximum number of steps is:
averages[which.max(averages$steps),]
##Imputing missing values
#There are many days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
missing.values <- is.na(data$steps)
# How many missing
table(missing.values)
#All of the missing values are filled in with mean value for that 5-minute interval.
imput.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(imput.value, filled.data$steps, filled.data$interval)
#Now, using the filled data set, let's make a histogram of the total number of steps taken each day and calculate the mean and median total number of steps.
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="Total number of steps per day")
mean(total.steps)
median(total.steps)
#Mean and median values are higher after imputing missing data, because we replaced all missing values of the original data set by the mean value. . The total number of steps taken in such days was set to 0 by default.These 0 values now have been removed from the histogram.
##Are there differences in activity patterns between weekdays and weekends?
#Find the day of the week for each measurement in the dataset (using the dataset with the filled-in values):
wday.or.wend <- function(da) {
day <- weekdays(da)
if (day %in% c("lundi", "mardi", "mercredi", "jeudi", "vendredi"))
return("weekday")
else if (day %in% c("samedi", "dimanche"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=wday.or.wend)
#Now, let's make a panel plot containing plots of average number of steps taken on weekdays and weekends.
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
