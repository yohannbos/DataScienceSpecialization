find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
?read.xlsx
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23, mode=wb)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
install.packages("xlsx")
install.packages("rJava")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
library(xlsx)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xls", mode='wb')
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
install.packages("rjava")
install.packages("readxl")
readxl read_excel
install.packages("gdata")
library(gdata)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="D:/Documents/Dev/DS_spe_JH/web2.xlsx", mode='wb')
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=7:15, rowindex=18:23)
library(xlsx)
x<-7:15
y<-18:23
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=x, rowindex=y)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=1, rowindex=2)
websubset<-read.xlsx("D:/Documents/Dev/DS_spe_JH/web2.xlsx", sheetIndex=1, colIndex=x, rowIndex=y)
sum(websubset$Zip*dat$Ext,na.rm=T)
sum(websubset$Zip*websubset$Ext,na.rm=T)
install.packages("xml")
install.packages("XML")
library(XML)
docxml<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T) )
library(XML)
docxml<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=T)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
docxml<-xmlTreeParse(fileurl, useInternal=T)
str("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
fileurl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
docxml<-xmlTreeParse(fileurl, useInternal=T)
rootnode<-xmlRoot(docxml)
xmlName(rootnode)
names(rootnode)
rootnode[[1][1]]
rootnode[[1]]
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv, destfile="D:/Documents/Dev/DS_spe_JH/web.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="D:/Documents/Dev/DS_spe_JH/web.csv")
fread(web.csv)
library(data.table)
fread(web.csv)
setwd("D/Documents/Dev")
fread(web.csv)
fread("D:/Documents/Dev/DS_spe_JH/web.csv")
?system.time
x<-fread("D:/Documents/Dev/DS_spe_JH/web.csv")
system.time(mean(DT$pwgtp15,by=DT$SEX))
DT<-fread("D:/Documents/Dev/DS_spe_JH/web.csv")
system.time(mean(DT$pwgtp15,by=DT$SEX))
sum(1000*system.time(mean(DT$pwgtp15,by=DT$SEX))
x<-sum(1000*system.time(mean(DT$pwgtp15,by=DT$SEX))
DT<-fread("D:/Documents/Dev/DS_spe_JH/web.csv")
system.time(for 1:1000 {mean(DT$pwgtp15,by=DT$SEX)})
?for
q
?for
??
??for
system.time(for i in 1:1000 {mean(DT$pwgtp15,by=DT$SEX)})
(for i in 1:1000 {mean(DT$pwgtp15,by=DT$SEX)})
for i in 1:1000 {mean(DT$pwgtp15,by=DT$SEX)}
for (i in 1:1000) {mean(DT$pwgtp15,by=DT$SEX)}
system.time(for (i in 1:1000) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:10000) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:10000) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:10000) {DT[,mean(pwgtp15),by=SEX]})
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:10000) {rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:10000) {DT[,mean(pwgtp15),by=SEX]})
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
?read.delim
?list.files
?paste
`001` <- read.csv("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/001.csv")
View(`001`)
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
data<-rbind(data,x)
}
colnames<-(data, c(date, sulfate, nitrate, id))
colMeans(as.character(paste(pollutant,"$data")), na.rm = T)
}
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
data<-rbind(data,x)
}
colnames<-(data, c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$data")), na.rm = T)
}
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat,x)
}
print(dat)
colnames<-(dat, c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
}
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
debug()
debug(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colnames<-(dat, c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
}
debug(pollutantmean)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colnames<-(dat c("date", "sulfate", "nitrate", "id"))
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
colNames <- (dat, c("date", "sulfate", "nitrate", "id"))
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
for (i in id) {
x <- read.csv(as.character(paste(sprintf("%03s",i),".csv")))
dat<-rbind(dat, x)
}
print(dat)
colMeans(as.character(paste(pollutant,"$dat")), na.rm = T)
}
debug(pollutantmean)
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
l<-pollutantmean("D:/Documents/Data Science/DS_spe_JH/2. R programming/Assignment 1/specdata/", "sulfate")
h
j
j
j
j
j
j
sessionInfo()
#read subject (subjects ID), activity (activity type) and data files
subjecttest<-fread(file.path(pathUCI,"test", "subject_test.txt"))
subjecttrain<-fread(file.path(pathUCI,"train", "subject_train.txt"))
activitytest<-fread(file.path(pathUCI,"test", "y_test.txt"))
activitytrain<-fread(file.path(pathUCI,"train", "y_train.txt"))
dttest<-read_fwf(file.path(pathUCI,"test", "X_test.txt"), fwf_empty(file.path(pathUCI,"test", "X_test.txt")))
dttrain<-read_fwf(file.path(pathUCI,"train", "X_train.txt"),fwf_empty(file.path(pathUCI,"train", "X_train.txt")))
#Merge respective Test and Train files (by raws)
allsubjects<-rbind(subjecttest, subjecttrain)
setnames(allsubjects, "V1", "Subject_Id")
allactivities<-rbind(activitytest, activitytrain)
setnames(allactivities, "V1", "Activity_Type")
dt<-rbind(dttest, dttrain)
#(dt columns names are described in the features.txt file)
dtFeatures <- fread(file.path(pathUCI, "features.txt"))
dtcolnames<- dtFeatures[[2]]
colnames(dt)<-dtcolnames
#Merge subject, activities and data tables (by columns)
mergeddt<-cbind(allsubjects, cbind(allactivities, dt))
setkeyv(mergeddt,"Subject_Id")
#extract means and standard deviations columns from mergeddt
extractdt1<-matchcols(mergeddt, with=c("mean", "std"), method="or")
library(data.table)
library(readr)
library(plyr)
library(reshape2)
library(gdata)
#read subject (subjects ID), activity (activity type) and data files
subjecttest<-fread(file.path(pathUCI,"test", "subject_test.txt"))
subjecttrain<-fread(file.path(pathUCI,"train", "subject_train.txt"))
activitytest<-fread(file.path(pathUCI,"test", "y_test.txt"))
activitytrain<-fread(file.path(pathUCI,"train", "y_train.txt"))
dttest<-read_fwf(file.path(pathUCI,"test", "X_test.txt"), fwf_empty(file.path(pathUCI,"test", "X_test.txt")))
dttrain<-read_fwf(file.path(pathUCI,"train", "X_train.txt"),fwf_empty(file.path(pathUCI,"train", "X_train.txt")))
#Merge respective Test and Train files (by raws)
allsubjects<-rbind(subjecttest, subjecttrain)
setnames(allsubjects, "V1", "Subject_Id")
allactivities<-rbind(activitytest, activitytrain)
setnames(allactivities, "V1", "Activity_Type")
dt<-rbind(dttest, dttrain)
#(dt columns names are described in the features.txt file)
dtFeatures <- fread(file.path(pathUCI, "features.txt"))
dtcolnames<- dtFeatures[[2]]
colnames(dt)<-dtcolnames
#Merge subject, activities and data tables (by columns)
mergeddt<-cbind(allsubjects, cbind(allactivities, dt))
setkeyv(mergeddt,"Subject_Id")
#extract means and standard deviations columns from mergeddt
extractdt1<-matchcols(mergeddt, with=c("mean", "std"), method="or")
#Courseproject
library(data.table)
library(readr)
library(plyr)
library(reshape2)
library(gdata)
#download dataset
d<-setwd("D:/Documents/Data Science/DS_spe_JH/3. Getting and Cleaning Data/Project/")
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
if (!file.exists(d)) {
dir.create(d)
}
download.file(url, file.path(d, "dataset.zip"), mode="wb")
#unzip dataset
unzip("dataset.zip", exdir=d)
#check the unziped folder
pathUCI <- file.path(d, "UCI HAR Dataset")
list.files(pathUCI, recursive = TRUE, include.dirs = TRUE)
#read subject (subjects ID), activity (activity type) and data files
subjecttest<-fread(file.path(pathUCI,"test", "subject_test.txt"))
subjecttrain<-fread(file.path(pathUCI,"train", "subject_train.txt"))
activitytest<-fread(file.path(pathUCI,"test", "y_test.txt"))
activitytrain<-fread(file.path(pathUCI,"train", "y_train.txt"))
dttest<-read_fwf(file.path(pathUCI,"test", "X_test.txt"), fwf_empty(file.path(pathUCI,"test", "X_test.txt")))
dttrain<-read_fwf(file.path(pathUCI,"train", "X_train.txt"),fwf_empty(file.path(pathUCI,"train", "X_train.txt")))
#Merge respective Test and Train files (by raws)
allsubjects<-rbind(subjecttest, subjecttrain)
setnames(allsubjects, "V1", "Subject_Id")
allactivities<-rbind(activitytest, activitytrain)
setnames(allactivities, "V1", "Activity_Type")
dt<-rbind(dttest, dttrain)
#(dt columns names are described in the features.txt file)
dtFeatures <- fread(file.path(pathUCI, "features.txt"))
dtcolnames<- dtFeatures[[2]]
colnames(dt)<-dtcolnames
#Merge subject, activities and data tables (by columns)
mergeddt<-cbind(allsubjects, cbind(allactivities, dt))
setkeyv(mergeddt,"Subject_Id")
#extract means and standard deviations columns from mergeddt
extractdt1<-matchcols(mergeddt, with=c("mean", "std"), method="or")
#subset(mergeddt, select=c(1:8))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
colnames(averagedt2)<-select(c=(3:8))
extractdt<-matchcols(mergeddt, with=c("mean", "std"), method="or")
setkeyv(mergeddt,"Subject_Id","Activity_Type")
setkeyv(mergeddt,c("Subject_Id","Activity_Type"))
extractdt<-mergeddt[, with=c("mean", "std"), method="or"]
extractdt<-mergeddt[, which=c("mean", "std")]
?which
extractdt<-mergeddt[, which(colnames==c("mean", "std"))]
extractdt<-mergeddt[, which(colnames==list("mean", "std"))]
extractdt<-mergeddt[, which(colnames==("mean", "std"))]
extractdt<-mergeddt[, which(colnames==("mean"|"std"))]
extractdt<-mergeddt[, which(colnames=="mean"| colnames=="std"))]
extractdt<-mergeddt[, which(colnames=="mean"| colnames=="std")]
extractdt<-mergeddt[, c("mean","std")]
extractdt<-mergeddt[grepl("mean\\(\\)|std\\(\\)", colnames(mergeddt))]
?grepl
grepl("mean\\(\\)|std\\(\\)",colnames(mergeddt))
extractdt<-mergeddt[,name(mergeddt)=="mean\\(\\)|std\\(\\)")]
extractdt<-mergeddt[,name(mergeddt)=="mean\\(\\)|std\\(\\)"]
extractdt<-mergeddt[,names(mergeddt)=="mean\\(\\)|std\\(\\)"]
head(extractdt)
extractdt<-mergeddt[,names(mergeddt)=="mean" & names(mergeddt)=="std"]
extractdt<-mergeddt[,names(mergeddt)=="mean" | names(mergeddt)=="std"]
head(extractdt)
extractdt<-mergeddt[,c("mean","std"]
extractdt<-mergeddt[,c("mean","std")]
mergeddt1<-as.dataframe(mergeddt)
matchcols(mergeddt, with="mean", method=c("or"))
selectmeanstd<-matchcols(mergeddt, with="mean", method=c("or"))
extractdt<-mergeddt[,selectmeanstd]
extractdt<-mergeddt[[selectmeanstd]]
extractdt<-mergeddt[selectmeanstd]
?subset.data.table
extractdt<-subset.data.table(mergeddt,select=selectmeanstd]
extractdt<-subset.data.table(mergeddt,select=selectmeanstd)
extractdt<-subset(mergeddt,select=selectmeanstd)
selectmeanstd<-matchcols(mergeddt, with=c("mean","std"), method=c("or"))
extractdt<-subset(mergeddt,select=selectmeanstd)
selectmeanstd<-matchcols(mergeddt, with=c("mean","std"), method=c("or"))
selectmeanstd<-matchcols(mergeddt, with=c"mean", method=c("or"))
selectmeanstd<-matchcols(mergeddt, with="mean", method=c("or"))
selectmean<-matchcols(mergeddt, with="mean")
extractdt<-subset(mergeddt,select=selectmean)
selectmean<-matchcols(mergeddt, with="mean")
selectstd<- matchcols(mergeddt, with="std")
extractdt<-subset(mergeddt,select=c(selectmean,selectstd))
View(extractdt)
selectmean<-matchcols(mergeddt, with=c("mean","std"))
selectmean<-matchcols(mergeddt, with=c("mean","std"), method = "or")
w<-c("mean","std")
selectmean<-matchcols(mergeddt, with=w, method = "or")
extractdt<-subset(mergeddt,select=c("Subject_Id", "Activity_Type",selectmean,selectstd))
extractdt<-subset(mergeddt,select=c("Subject_Id", "Activity_Type", selectmean, selectstd))
extractdt<-subset(mergeddt,select=c(selectmean, selectstd))
selectmean<-matchcols(mergeddt, with="mean", method = "or")
selectstd<- matchcols(mergeddt, with="std")
extractdt<-subset(mergeddt,select=c(selectmean,selectstd))
extractdt<-subset(mergeddt,select=c("Activity_Type",selectmean,selectstd))
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
View(averagedt2)
selectmean<-matchcols(mergeddt, with="mean()", method = "or")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
selectmean<-matchcols(mergeddt, with="mean()", method = "or")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
?grep
selectmean<-matchcols(mergeddt, with="%mean()", method = "or")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
electmean<-matchcols(mergeddt, with="%mean()^", method = "or")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
selectmean<-matchcols(mergeddt, with="%mean()^")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
selectmean<-matchcols(mergeddt, with="mean()^")
selectmean<-matchcols(mergeddt, with="mean()")
selectmean<-matchcols(mergeddt, with="mean()", without=Freq)
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
selectmean<-matchcols(mergeddt, with="mean()", without=Freq)
selectmean<-matchcols(mergeddt, with="mean()", without="Freq")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
tactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
View(averagedt2)
write.table(averagedt2, row.name=FALSE)
?write.table()
write.table(averagedt2, file="d/tidydata.txt", row.name=FALSE)
write.table(averagedt2, file=file.pqth(d, "tidydata.txt"), row.name=FALSE)
write.table(averagedt2, file=file.path(d, "tidydata.txt"), row.name=FALSE)
tidydata<-write.table(averagedt2, file=file.path(d, "tidydata.txt"), row.name=FALSE)
tidydata<-write.table(averagedt2, file=file.path("D:/Documents/Data Science/DS_spe_JH/3. Getting and Cleaning Data/Project/tidydata.txt"), row.name=FALSE)
tidydata<-write.table(averagedt2, file="D:/Documents/Data Science/DS_spe_JH/3. Getting and Cleaning Data/Project/tidydata.txt", row.name=FALSE)
?knit
install.packages("knitr")
library(knitr)
knit("makeCodebook.Rmd", output = "codebook.md", encoding = "ISO8859-1", quiet = TRUE)
?knit
install.packages("htmltools")
install.packages("caTools")
install.packages("rmarkdown")
```{r}
installXLSXsupport()
tidydata<-write.table(averagedt2, file="D:/Documents/Data Science/DS_spe_JH/3. Getting and Cleaning Data/Project/tidydata.txt", row.name=FALSE)
#Courseproject
library(data.table)
library(readr)
library(plyr)
library(reshape2)
library(gdata)
library(knitr)
#download dataset
d<-setwd("D:/Documents/Data Science/DS_spe_JH/3. Getting and Cleaning Data/Project/")
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
if (!file.exists(d)) {
dir.create(d)
}
download.file(url, file.path(d, "dataset.zip"), mode="wb")
#unzip dataset
unzip("dataset.zip", exdir=d)
#check the unziped folder
pathUCI <- file.path(d, "UCI HAR Dataset")
list.files(pathUCI, recursive = TRUE, include.dirs = TRUE)
#read subject (subjects ID), activity (activity type) and data files
subjecttest<-fread(file.path(pathUCI,"test", "subject_test.txt"))
subjecttrain<-fread(file.path(pathUCI,"train", "subject_train.txt"))
activitytest<-fread(file.path(pathUCI,"test", "y_test.txt"))
activitytrain<-fread(file.path(pathUCI,"train", "y_train.txt"))
dttest<-read_fwf(file.path(pathUCI,"test", "X_test.txt"), fwf_empty(file.path(pathUCI,"test", "X_test.txt")))
dttrain<-read_fwf(file.path(pathUCI,"train", "X_train.txt"),fwf_empty(file.path(pathUCI,"train", "X_train.txt")))
#Merge respective Test and Train files (by raws)
allsubjects<-rbind(subjecttest, subjecttrain)
setnames(allsubjects, "V1", "Subject_Id")
allactivities<-rbind(activitytest, activitytrain)
setnames(allactivities, "V1", "Activity_Type")
dt<-rbind(dttest, dttrain)
#(dt columns names are described in the features.txt file)
dtFeatures <- fread(file.path(pathUCI, "features.txt"))
dtcolnames<- dtFeatures[[2]]
colnames(dt)<-dtcolnames
#Merge subject, activities and data tables (by columns)
mergeddt<-cbind(allsubjects, cbind(allactivities, dt))
setkeyv(mergeddt,c("Subject_Id","Activity_Type"))
#extract means and standard deviations columns from mergeddt (exclude meanFreq())
selectmean<-matchcols(mergeddt, with="mean()", without="Freq")
selectstd<- matchcols(mergeddt, with="std()")
extractdt<-subset(mergeddt,select=c("Subject_Id","Activity_Type",selectmean,selectstd))
#replace activity numbers by respective activity names found in activity_labels.txt
dtactivity <- fread(file.path(pathUCI, "activity_labels.txt"))
extractdt$Activity_Type<-as.factor(extractdt$Activity_Type)
levels(extractdt$Activity_Type)<-dtactivity[[2]]
#create new data table with average of each variable for each combination of subject and activity
averagedt<-melt(extractdt, id.var=c("Subject_Id", "Activity_Type"))
averagedt2<-dcast(averagedt, Subject_Id + Activity_Type ~ variable,fun=mean)
#save as text file
tidydata<-write.table(averagedt2, file="D:/Documents/Data Science/DS_spe_JH/3. Getting and Cleaning Data/Project/tidydata.txt", row.name=FALSE)
# make codebook
codebook<-data.frame(variables.names=c(names(tidydata)))
?dcast
library(data.table)
library(readr)
library(plyr)
library(reshape2)
library(gdata)
?dcast
